// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Arbiter
@_exported import Arbiter
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import os.log
import os
extension Arbiter.KepArbiter : WebKit.WKNavigationDelegate {
  public static let NavigationDelegate: Arbiter.KepArbiter
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension Foundation.URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class KepArbiter : ObjectiveC.NSObject {
  public func setUserId(_ userId: Swift.String)
  public func setAdid(_ adid: Swift.String)
  public func setTargeting(_ targetings: [Swift.String : Any])
  public func setUserProperties(_ userProperties: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
extension Arbiter.KepArbiter {
  public func initialize(sdkKey: Swift.String, userId: Swift.String? = nil, adid: Swift.String? = nil)
  public func initialize(sdkKey: Swift.String, userId: Swift.String? = nil, adid: Swift.String? = nil, completion: @escaping () -> ())
  public func variation<T>(token: Swift.String) -> T? where T : Swift.Decodable
  public func variation<T>(token: Swift.String, completion: @escaping (T?) -> ()) where T : Swift.Decodable
  public func logEvent(_ name: Swift.String, parameters: [Swift.String : Any]? = nil)
}
public struct ArbiterHttpResponse {
  public let response: Foundation.URLResponse?
  public let result: Swift.Result<Foundation.Data, Swift.Error>
}
extension Swift.Array : Swift.Comparable where Element : Swift.Comparable {
  public static func < (lhs: [Element], rhs: [Element]) -> Swift.Bool
}
